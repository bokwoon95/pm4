simple

theme pics are all namespaced by the theme, ensuring that a theme filename is always unique within a website. we basically check that there are no conflicting themes on application startup, so the namespaces are guaranteed to be unique

all user-uploaded images are stored in the same place, and the namespaced filename guarantees that there will no no naming conflicts. But the theme folders themselves also come with default images as fallback in the filename they are looking for is not present inside the user uploads folder.

a page consists of templates and json data. json data is sourced from the page-specific json as well as the <data groups> (think of a better name)

in order to automatically generate a CRUD form for data group json as well as page json, the theme author will have to specify a json schema for each blob. Each json schema blob should contain enough information to meaningfully generate a form from it automatically.

no doubt, sometimes pages will have to run arbitrary SQL queries (only SELECTs) in order to generate the page data. this takes the form of goja scripts.

web ui is still possible; when used in single user mode it is enabled by default. No login wall at all. Straight to the URL dashboard.

pointing a URL at a resource needs some thinking. By right I want the user to be able to point a URL at a theme template, or a HTML file directly (becomes almost like apache in that sense).

Using go-git, I can ask the user to simply input the github URL and pagemanager can clone the theme's repo directly into the datafolder.
